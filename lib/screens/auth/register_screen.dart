import 'package:flutter/material.dart';
import 'package:p_learn_app/screens/auth/login_screen.dart';
import 'package:p_learn_app/services/auth_service.dart';
import 'package:provider/provider.dart';

class RegisterScreen extends StatefulWidget {
  const RegisterScreen({super.key});

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  // --- KHAI B√ÅO STATE ---
  final _formKey = GlobalKey<FormState>();
  final _studentIdController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();
  final _recoveryEmailController = TextEditingController();
  final _majorController = TextEditingController();

  bool _isPasswordVisible = false;
  bool _isLoading = false;
  final Color _primaryColor = const Color.fromARGB(255, 235, 87, 87);

  final Map<String, String> _majorMap = {
    'DCCN': 'C√¥ng Ngh·ªá Th√¥ng Tin',
    'DCAT': 'An To√†n Th√¥ng Tin',
    'DCKT': 'K·ªπ Thu·∫≠t ƒêi·ªán T·ª≠ Vi·ªÖn Th√¥ng',
    'DCQT': 'Qu·∫£n Tr·ªã Kinh Doanh',
  };

  // --- LOGIC X·ª¨ L√ù ---
  @override
  void initState() {
    super.initState();
    // S·ª¨A 1: S·ª≠ d·ª•ng ƒë√∫ng t√™n controller
    _studentIdController.addListener(_updateMajor);
  }

  @override
  void dispose() {
    // S·ª¨A 1: S·ª≠ d·ª•ng ƒë√∫ng t√™n controller v√† dispose t·∫•t c·∫£
    _studentIdController.removeListener(_updateMajor);
    _studentIdController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    _recoveryEmailController.dispose();
    _majorController.dispose();
    super.dispose();
  }

  void _updateMajor() {
    // S·ª¨A 1: S·ª≠ d·ª•ng ƒë√∫ng t√™n controller
    String studentId = _studentIdController.text.toUpperCase();

    if (studentId.length >= 8) {
      String majorCode = studentId.substring(3, 7);
      String cohort = studentId.substring(1, 3);
      if (_majorMap.containsKey(majorCode)) {
        setState(() {
          _majorController.text = '${_majorMap[majorCode]} - Kh√≥a $cohort';
        });
      }
    } else {
      setState(() {
        _majorController.text = '';
      });
    }
  }

  Future<void> _handleRegister() async {
    // Logic ƒëƒÉng k√Ω c·ªßa b·∫°n ƒë√£ t·ªët, gi·ªØ nguy√™n
    print('üöÄ [REGISTER] H√†m _handleRegister ƒë∆∞·ª£c g·ªçi.');
    if (_formKey.currentState!.validate()) {
      print('‚úÖ [REGISTER] Form validation th√†nh c√¥ng.');

      // Kh√¥ng c·∫ßn ki·ªÉm tra m·∫≠t kh·∫©u ·ªü ƒë√¢y n·ªØa v√¨ validator ƒë√£ l√†m

      setState(() {
        _isLoading = true;
      });

      try {
        print('‚è≥ [REGISTER] Chu·∫©n b·ªã g·ªçi authService.register()...');
        final authService = Provider.of<AuthService>(context, listen: false);
        final success = await authService.register(
          _studentIdController.text.trim(),
          _recoveryEmailController.text.trim(), // TH√äM: G·ª≠i email
          _passwordController.text,
        );
        print(
          'üí¨ [REGISTER] authService.register() ƒë√£ ho√†n th√†nh. K·∫øt qu·∫£: success = $success',
        );

        if (success && mounted) {
          print('üéâ [REGISTER] ƒêƒÉng k√Ω th√†nh c√¥ng!');
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text(
                'ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.',
              ),
              backgroundColor: Colors.green,
            ),
          );
          // ƒêi·ªÅu h∆∞·ªõng v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
          Navigator.of(context).pushReplacement(
            MaterialPageRoute(builder: (context) => const LoginScreen()),
          );
        } else if (mounted) {
          print('‚ùå [REGISTER] ƒêƒÉng k√Ω th·∫•t b·∫°i.');
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text(
                'ƒêƒÉng k√Ω th·∫•t b·∫°i. M√£ sinh vi√™n ho·∫∑c email c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.',
              ),
              backgroundColor: Colors.red,
            ),
          );
        }
      } catch (e) {
        print('üî• [REGISTER] ƒê√É C√ì L·ªñI X·∫¢Y RA! L·ªói: ${e.toString()}');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('L·ªói: ${e.toString()}'),
              backgroundColor: Colors.red,
            ),
          );
        }
      } finally {
        print('üßπ [REGISTER] Kh·ªëi finally ƒë∆∞·ª£c th·ª±c thi.');
        if (mounted) {
          setState(() {
            _isLoading = false;
          });
        }
      }
    } else {
      print('üìù [REGISTER] Form validation th·∫•t b·∫°i.');
    }
  }

  // --- GIAO DI·ªÜN (UI) ---
  // T√ÅI C·∫§U TR√öC: H√†m build b√¢y gi·ªù r·∫•t g·ªçn g√†ng
  @override
Widget build(BuildContext context) {
  return Scaffold(
    backgroundColor: Colors.white,
    body: SafeArea(
      // S·ª¨A L·ªñI: B·ªçc to√†n b·ªô n·ªôi dung trong Center
      child: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 32.0),
          // B·ªè LayoutBuilder v√† ConstrainedBox, Column s·∫Ω t·ª± co l·∫°i v√† ƒë∆∞·ª£c Center cƒÉn gi·ªØa
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              _buildHeader(),
              const SizedBox(height: 32),
              _buildRegisterForm(),
            ],
          ),
        ),
      ),
    ),
  );
}

  // T√ÅI C·∫§U TR√öC: T√°ch ph·∫ßn Header ra m·ªôt h√†m ri√™ng
  Widget _buildHeader() {
    return Column(
      children: [
        Container(
          width: 80,
          height: 80,
          decoration: BoxDecoration(
            color: _primaryColor,
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: _primaryColor.withOpacity(0.3),
                blurRadius: 10,
                offset: const Offset(0, 5),
              ),
            ],
          ),
          child: const Icon(Icons.school, size: 40, color: Colors.white),
        ),
        const SizedBox(height: 16),
        Text(
          'T·∫°o t√†i kho·∫£n',
          style: Theme.of(
            context,
          ).textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 8),
      ],
    );
  }

  // T√ÅI C·∫§U TR√öC: T√°ch to√†n b·ªô Form ra m·ªôt h√†m ri√™ng
  Widget _buildRegisterForm() {
    // Th√™m hi·ªáu ·ª©ng animation cho c√°c tr∆∞·ªùng trong form
    return Form(
      key: _formKey,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          TextFormField(
            controller: _studentIdController,
            decoration: _buildInputDecoration(
              labelText: 'M√£ sinh vi√™n',
              hintText: 'Nh·∫≠p m√£ sinh vi√™n c·ªßa b·∫°n',
              prefixIcon: Icons.badge_outlined,
            ),
            validator: (value) => value == null || value.isEmpty
                ? 'Vui l√≤ng nh·∫≠p m√£ sinh vi√™n'
                : null,
          ),
          const SizedBox(height: 16),
          TextFormField(
            controller: _recoveryEmailController,
            keyboardType: TextInputType.emailAddress,
            decoration: _buildInputDecoration(
              labelText: 'Email kh√¥i ph·ª•c',
              hintText: 'Nh·∫≠p email c√° nh√¢n',
              prefixIcon: Icons.email_outlined,
            ),
            validator: (value) {
              if (value == null || value.isEmpty) return 'Vui l√≤ng nh·∫≠p email';
              if (!value.contains('@') || !value.contains('.'))
                return 'Email kh√¥ng h·ª£p l·ªá';
              return null;
            },
          ),
          const SizedBox(height: 16),
          TextFormField(
            controller: _passwordController,
            obscureText: !_isPasswordVisible,
            decoration: _buildInputDecoration(
              labelText: 'M·∫≠t kh·∫©u',
              hintText: 'Nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n',
              prefixIcon: Icons.lock_outline,
              suffixIcon: IconButton(
                icon: Icon(
                  _isPasswordVisible ? Icons.visibility : Icons.visibility_off,
                  color: Colors.grey,
                ),
                onPressed: () =>
                    setState(() => _isPasswordVisible = !_isPasswordVisible),
              ),
            ),
            validator: (value) {
              if (value == null || value.isEmpty)
                return 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u';
              if (value.length < 6) return 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
              return null;
            },
          ),
          const SizedBox(height: 16),
          TextFormField(
            controller: _confirmPasswordController,
            obscureText: !_isPasswordVisible,
            decoration: _buildInputDecoration(
              labelText: 'X√°c nh·∫≠n m·∫≠t kh·∫©u',
              hintText: 'Nh·∫≠p l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n',
              prefixIcon: Icons.lock_outline,
            ),
            validator: (value) {
              if (value == null || value.isEmpty)
                return 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u';
              if (value != _passwordController.text)
                return 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp';
              return null;
            },
          ),
          const SizedBox(height: 16),
          TextFormField(
            controller: _majorController,
            readOnly: true,
            decoration: _buildInputDecoration(
              labelText: 'Ng√†nh h·ªçc c·ªßa b·∫°n',
              prefixIcon: Icons.school_outlined,
              isReadOnly: true, // Th√™m c·ªù ƒë·ªÉ nh·∫≠n bi·∫øt tr∆∞·ªùng ch·ªâ ƒë·ªçc
            ),
          ),
          const SizedBox(height: 32),
          ElevatedButton(
            onPressed: _isLoading ? null : _handleRegister,
            style: ElevatedButton.styleFrom(
              backgroundColor: _primaryColor,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: _isLoading
                ? const SizedBox(
                    height: 20,
                    width: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                  )
                : const Text(
                    'ƒêƒÉng k√≠',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                  ),
          ),
          const SizedBox(height: 24),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text("ƒê√£ c√≥ t√†i kho·∫£n?"),
              TextButton(
                onPressed: () {
                  Navigator.of(context).pushReplacement(
                    MaterialPageRoute(
                      builder: (context) => const LoginScreen(),
                    ),
                  );
                },
                child: Text(
                  "ƒêƒÉng nh·∫≠p ngay",
                  style: TextStyle(
                    color: _primaryColor,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  // T√ÅI C·∫§U TR√öC: C·∫£i thi·ªán h√†m helper
  InputDecoration _buildInputDecoration({
    required String labelText,
    String? hintText, // hintText c√≥ th·ªÉ null
    required IconData prefixIcon,
    Widget? suffixIcon,
    bool isReadOnly = false, // Th√™m c·ªù cho tr∆∞·ªùng ch·ªâ ƒë·ªçc
  }) {
    return InputDecoration(
      labelText: labelText,
      hintText: hintText,
      prefixIcon: Icon(prefixIcon, color: Colors.grey.shade600),
      suffixIcon: suffixIcon,
      filled: isReadOnly, // Ch·ªâ t√¥ m√†u n·ªÅn khi isReadOnly
      fillColor: Colors.grey.shade100,
      border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: Colors.grey.shade300),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: _primaryColor, width: 2),
      ),
    );
  }

  // T√ÅI C·∫§U TR√öC: Helper method ƒë·ªÉ t·∫°o InputDecoration
}
